str = input()

print(str)

def solution(a, b):
    # 제한사항 검사
    if not (-100000 <= a <= 100000) or not (-100000 <= b <= 100000):
        return "Error: a and b must be within the range -100,000 to 100,000."
    
    # 제한사항을 만족하는 경우 결과 출력
    return f"a = {a}\nb = {b}"

# 입력 받기
a, b = map(int, input().split())

# 결과 출력
print(solution(a, b))

# 문자열 반복해서 출력하기
str, n = input().strip().split(' ')
n = int(n)

result = str * n

print(result)

# 대소문자 바꿔서 출력하기
# 입력 받기
str = input()

# 대소문자 변환
result = str.swapcase()

# 결과 출력
print(result)

# Printing special characters
print("!@#$%^&*(\\\'\"<>?:;")

# 두 정수를 입력받습니다.
a, b = map(int, input().split())

# 계산 결과를 구합니다.
c = a + b

# 결과를 출력합니다.
print(f"{a} + {b} = {c}")

str1, str2 = input().split()
print(str1 + str2)

str = input()
for char in str:
    print(char)

# 정수 l과 r이 주어졌을 때, l 이상 r이하의 정수 중에서 숫자 "0"과 "5"로만 이루어진 모든 정수를 오름차순으로 저장한 배열을 return 하는 solution 함수를 완성해 주세요. 만약 그러한 정수가 없다면, -1이 담긴 배열을 return 합니다.
def solution(l, r):
    def generate_numbers(l, r):
        results = []
        def generate_all_combinations(current_number, l, r, results):
            if current_number:
                num = int(current_number)
                if l <= num <= r:
                    results.append(num)
            if len(current_number) < len(str(r)):
                generate_all_combinations(current_number + '0', l, r, results)
                generate_all_combinations(current_number + '5', l, r, results)

        generate_all_combinations('', l, r, results)
        return results

    numbers = generate_numbers(l, r)
    if not numbers:
        return [-1]
    return sorted(set(numbers))



